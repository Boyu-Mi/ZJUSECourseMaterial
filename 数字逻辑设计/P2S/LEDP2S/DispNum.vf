////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : DispNum.vf
// /___/   /\     Timestamp : 12/22/2020 14:19:08
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family kintex7 -verilog D:/ISE_project/12.21/LEDP2S/DispNum.vf -w D:/ISE_project/12.21/LEDP2S/DispNum.sch
//Design Name: DispNum
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module INV4_HXILINX_DispNum (O0, O1, O2, O3, I0, I1, I2, I3);
    

   output O0;
   output O1;
   output O2;
   output O3;

   input  I0;
   input  I1;
   input  I2;
   input  I3;

assign O0 = !I0;
assign O1 = !I1;
assign O2 = !I2;
assign O3 = !I3;

endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_DispNum (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 1ns / 1ps

module MyMC14495_MUSER_DispNum(D0, 
                               D1, 
                               D2, 
                               D3, 
                               LE, 
                               point, 
                               a, 
                               b, 
                               c, 
                               d, 
                               e, 
                               f, 
                               g, 
                               p);

    input D0;
    input D1;
    input D2;
    input D3;
    input LE;
    input point;
   output a;
   output b;
   output c;
   output d;
   output e;
   output f;
   output g;
   output p;
   
   wire XLXN_9;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_30;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_51;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_57;
   wire XLXN_62;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_79;
   wire XLXN_80;
   wire XLXN_82;
   wire XLXN_84;
   wire XLXN_85;
   wire XLXN_87;
   wire XLXN_88;
   wire XLXN_89;
   wire XLXN_90;
   
   INV  XLXI_5 (.I(D3), 
               .O(XLXN_9));
   INV  XLXI_6 (.I(D2), 
               .O(XLXN_26));
   INV  XLXI_7 (.I(D1), 
               .O(XLXN_27));
   INV  XLXI_8 (.I(D0), 
               .O(XLXN_30));
   AND4  XLXI_9 (.I0(D0), 
                .I1(XLXN_26), 
                .I2(XLXN_27), 
                .I3(XLXN_9), 
                .O(XLXN_36));
   AND4  XLXI_10 (.I0(XLXN_30), 
                 .I1(XLXN_27), 
                 .I2(D2), 
                 .I3(XLXN_9), 
                 .O(XLXN_37));
   AND4  XLXI_12 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_26), 
                 .I3(D3), 
                 .O(XLXN_40));
   AND4  XLXI_13 (.I0(D0), 
                 .I1(XLXN_27), 
                 .I2(D2), 
                 .I3(XLXN_9), 
                 .O(XLXN_41));
   AND4  XLXI_17 (.I0(XLXN_30), 
                 .I1(D1), 
                 .I2(XLXN_26), 
                 .I3(XLXN_9), 
                 .O(XLXN_47));
   AND4  XLXI_20 (.I0(XLXN_30), 
                 .I1(D1), 
                 .I2(XLXN_26), 
                 .I3(D3), 
                 .O(XLXN_50));
   AND4  XLXI_28 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .I3(XLXN_9), 
                 .O(XLXN_79));
   AND4  XLXI_71 (.I0(XLXN_30), 
                 .I1(XLXN_27), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_80));
   AND4  XLXI_72 (.I0(D0), 
                 .I1(XLXN_27), 
                 .I2(D2), 
                 .I3(D3), 
                 .O(XLXN_39));
   AND3  XLXI_73 (.I0(XLXN_30), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_42));
   AND3  XLXI_74 (.I0(XLXN_30), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_44));
   AND3  XLXI_75 (.I0(D0), 
                 .I1(D1), 
                 .I2(D3), 
                 .O(XLXN_45));
   AND3  XLXI_76 (.I0(D1), 
                 .I1(D2), 
                 .I2(D3), 
                 .O(XLXN_48));
   AND3  XLXI_77 (.I0(D0), 
                 .I1(D1), 
                 .I2(D2), 
                 .O(XLXN_49));
   AND2  XLXI_78 (.I0(D0), 
                 .I1(XLXN_9), 
                 .O(XLXN_51));
   AND3  XLXI_79 (.I0(XLXN_27), 
                 .I1(D2), 
                 .I2(XLXN_9), 
                 .O(XLXN_52));
   AND3  XLXI_80 (.I0(XLXN_27), 
                 .I1(XLXN_26), 
                 .I2(XLXN_9), 
                 .O(XLXN_65));
   AND3  XLXI_81 (.I0(D0), 
                 .I1(D1), 
                 .I2(XLXN_9), 
                 .O(XLXN_64));
   AND3  XLXI_82 (.I0(D1), 
                 .I1(XLXN_26), 
                 .I2(XLXN_9), 
                 .O(XLXN_62));
   AND3  XLXI_83 (.I0(D0), 
                 .I1(XLXN_26), 
                 .I2(XLXN_9), 
                 .O(XLXN_57));
   OR4  XLXI_85 (.I0(XLXN_40), 
                .I1(XLXN_39), 
                .I2(XLXN_37), 
                .I3(XLXN_36), 
                .O(XLXN_82));
   OR4  XLXI_86 (.I0(XLXN_45), 
                .I1(XLXN_44), 
                .I2(XLXN_42), 
                .I3(XLXN_41), 
                .O(XLXN_84));
   OR3  XLXI_87 (.I0(XLXN_48), 
                .I1(XLXN_47), 
                .I2(XLXN_44), 
                .O(XLXN_85));
   OR4  XLXI_88 (.I0(XLXN_50), 
                .I1(XLXN_49), 
                .I2(XLXN_37), 
                .I3(XLXN_36), 
                .O(XLXN_87));
   OR3  XLXI_89 (.I0(XLXN_53), 
                .I1(XLXN_52), 
                .I2(XLXN_51), 
                .O(XLXN_88));
   OR4  XLXI_90 (.I0(XLXN_64), 
                .I1(XLXN_62), 
                .I2(XLXN_57), 
                .I3(XLXN_39), 
                .O(XLXN_89));
   OR3  XLXI_91 (.I0(XLXN_80), 
                .I1(XLXN_79), 
                .I2(XLXN_65), 
                .O(XLXN_90));
   AND3  XLXI_92 (.I0(D0), 
                 .I1(XLXN_27), 
                 .I2(XLXN_26), 
                 .O(XLXN_53));
   OR2  XLXI_93 (.I0(LE), 
                .I1(XLXN_82), 
                .O(a));
   OR2  XLXI_94 (.I0(LE), 
                .I1(XLXN_84), 
                .O(b));
   OR2  XLXI_95 (.I0(LE), 
                .I1(XLXN_85), 
                .O(c));
   OR2  XLXI_96 (.I0(LE), 
                .I1(XLXN_87), 
                .O(d));
   OR2  XLXI_97 (.I0(LE), 
                .I1(XLXN_88), 
                .O(e));
   OR2  XLXI_98 (.I0(LE), 
                .I1(XLXN_89), 
                .O(f));
   OR2  XLXI_99 (.I0(LE), 
                .I1(XLXN_90), 
                .O(g));
   INV  XLXI_100 (.I(point), 
                 .O(p));
endmodule
`timescale 1ns / 1ps

module MUX4to1_MUSER_DispNum(I0, 
                             I1, 
                             I2, 
                             I3, 
                             s, 
                             O);

    input I0;
    input I1;
    input I2;
    input I3;
    input [1:0] s;
   output O;
   
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_9;
   wire XLXN_11;
   wire XLXN_13;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_4));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_5));
   AND2  XLXI_3 (.I0(XLXN_5), 
                .I1(XLXN_4), 
                .O(XLXN_7));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_4), 
                .O(XLXN_9));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_5), 
                .O(XLXN_11));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_13));
   AND2  XLXI_7 (.I0(I0), 
                .I1(XLXN_7), 
                .O(XLXN_15));
   AND2  XLXI_8 (.I0(I1), 
                .I1(XLXN_9), 
                .O(XLXN_18));
   AND2  XLXI_9 (.I0(I2), 
                .I1(XLXN_11), 
                .O(XLXN_17));
   AND2  XLXI_10 (.I0(I3), 
                 .I1(XLXN_13), 
                 .O(XLXN_16));
   OR4  XLXI_11 (.I0(XLXN_16), 
                .I1(XLXN_17), 
                .I2(XLXN_18), 
                .I3(XLXN_15), 
                .O(O));
endmodule
`timescale 1ns / 1ps

module Mux4to1b4_MUSER_DispNum(I0, 
                               I1, 
                               I2, 
                               I3, 
                               s, 
                               O);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] O;
   
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_22;
   wire XLXN_27;
   wire XLXN_28;
   wire XLXN_29;
   wire XLXN_30;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_4));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_5));
   AND2  XLXI_3 (.I0(XLXN_5), 
                .I1(XLXN_4), 
                .O(XLXN_27));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_4), 
                .O(XLXN_28));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_5), 
                .O(XLXN_29));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_30));
   AND2  XLXI_7 (.I0(I0[0]), 
                .I1(XLXN_27), 
                .O(XLXN_7));
   AND2  XLXI_8 (.I0(I1[0]), 
                .I1(XLXN_28), 
                .O(XLXN_9));
   AND2  XLXI_9 (.I0(I2[0]), 
                .I1(XLXN_29), 
                .O(XLXN_10));
   AND2  XLXI_10 (.I0(I3[0]), 
                 .I1(XLXN_30), 
                 .O(XLXN_8));
   OR4  XLXI_11 (.I0(XLXN_8), 
                .I1(XLXN_10), 
                .I2(XLXN_9), 
                .I3(XLXN_7), 
                .O(O[0]));
   AND2  XLXI_12 (.I0(I0[1]), 
                 .I1(XLXN_27), 
                 .O(XLXN_11));
   AND2  XLXI_13 (.I0(I1[1]), 
                 .I1(XLXN_28), 
                 .O(XLXN_13));
   AND2  XLXI_14 (.I0(I2[1]), 
                 .I1(XLXN_29), 
                 .O(XLXN_14));
   AND2  XLXI_15 (.I0(I3[1]), 
                 .I1(XLXN_30), 
                 .O(XLXN_12));
   OR4  XLXI_16 (.I0(XLXN_12), 
                .I1(XLXN_14), 
                .I2(XLXN_13), 
                .I3(XLXN_11), 
                .O(O[1]));
   AND2  XLXI_17 (.I0(I0[2]), 
                 .I1(XLXN_27), 
                 .O(XLXN_15));
   AND2  XLXI_18 (.I0(I1[2]), 
                 .I1(XLXN_28), 
                 .O(XLXN_17));
   AND2  XLXI_19 (.I0(I2[2]), 
                 .I1(XLXN_29), 
                 .O(XLXN_18));
   AND2  XLXI_20 (.I0(I3[2]), 
                 .I1(XLXN_30), 
                 .O(XLXN_16));
   OR4  XLXI_21 (.I0(XLXN_16), 
                .I1(XLXN_18), 
                .I2(XLXN_17), 
                .I3(XLXN_15), 
                .O(O[2]));
   AND2  XLXI_22 (.I0(I0[3]), 
                 .I1(XLXN_27), 
                 .O(XLXN_19));
   AND2  XLXI_23 (.I0(I1[3]), 
                 .I1(XLXN_28), 
                 .O(XLXN_21));
   AND2  XLXI_24 (.I0(I2[3]), 
                 .I1(XLXN_29), 
                 .O(XLXN_22));
   AND2  XLXI_25 (.I0(I3[3]), 
                 .I1(XLXN_30), 
                 .O(XLXN_20));
   OR4  XLXI_26 (.I0(XLXN_20), 
                .I1(XLXN_22), 
                .I2(XLXN_21), 
                .I3(XLXN_19), 
                .O(O[3]));
endmodule
`timescale 1ns / 1ps

module DisplaySync_MUSER_DispNum(Hexs, 
                                 LES, 
                                 point, 
                                 Scan, 
                                 AN, 
                                 HEX, 
                                 LE, 
                                 p);

    input [15:0] Hexs;
    input [3:0] LES;
    input [3:0] point;
    input [1:0] Scan;
   output [3:0] AN;
   output [3:0] HEX;
   output LE;
   output p;
   
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   wire XLXN_27;
   
   Mux4to1b4_MUSER_DispNum  XLXI_1 (.I0(Hexs[3:0]), 
                                   .I1(Hexs[7:4]), 
                                   .I2(Hexs[11:8]), 
                                   .I3(Hexs[15:12]), 
                                   .s(Scan[1:0]), 
                                   .O(HEX[3:0]));
   MUX4to1_MUSER_DispNum  XLXI_2 (.I0(point[0]), 
                                 .I1(point[1]), 
                                 .I2(point[2]), 
                                 .I3(point[3]), 
                                 .s(Scan[1:0]), 
                                 .O(p));
   MUX4to1_MUSER_DispNum  XLXI_3 (.I0(LES[0]), 
                                 .I1(LES[1]), 
                                 .I2(LES[2]), 
                                 .I3(LES[3]), 
                                 .s(Scan[1:0]), 
                                 .O(LE));
   (* HU_SET = "XLXI_4_2" *) 
   D2_4E_HXILINX_DispNum  XLXI_4 (.A0(Scan[0]), 
                                 .A1(Scan[1]), 
                                 .E(XLXN_23), 
                                 .D0(XLXN_24), 
                                 .D1(XLXN_25), 
                                 .D2(XLXN_26), 
                                 .D3(XLXN_27));
   VCC  XLXI_5 (.P(XLXN_23));
   (* HU_SET = "XLXI_6_3" *) 
   INV4_HXILINX_DispNum  XLXI_6 (.I0(XLXN_27), 
                                .I1(XLXN_26), 
                                .I2(XLXN_25), 
                                .I3(XLXN_24), 
                                .O0(AN[3]), 
                                .O1(AN[2]), 
                                .O2(AN[1]), 
                                .O3(AN[0]));
endmodule
`timescale 1ns / 1ps

module DispNum(clk, 
               HEXS, 
               LES, 
               points, 
               RST, 
               AN, 
               Segment);

    input clk;
    input [15:0] HEXS;
    input [3:0] LES;
    input [3:0] points;
    input RST;
   output [3:0] AN;
   output [7:0] Segment;
   
   wire [31:0] clkd;
   wire [3:0] HEX;
   wire XLXN_16;
   wire XLXN_17;
   
   clkdiv  XLXI_1 (.clk(clk), 
                  .rst(RST), 
                  .clkdiv(clkd[31:0]));
   DisplaySync_MUSER_DispNum  XLXI_2 (.Hexs(HEXS[15:0]), 
                                     .LES(LES[3:0]), 
                                     .point(points[3:0]), 
                                     .Scan(clkd[18:17]), 
                                     .AN(AN[3:0]), 
                                     .HEX(HEX[3:0]), 
                                     .LE(XLXN_17), 
                                     .p(XLXN_16));
   MyMC14495_MUSER_DispNum  XLXI_3 (.D0(HEX[0]), 
                                   .D1(HEX[1]), 
                                   .D2(HEX[2]), 
                                   .D3(HEX[3]), 
                                   .LE(XLXN_17), 
                                   .point(XLXN_16), 
                                   .a(Segment[0]), 
                                   .b(Segment[1]), 
                                   .c(Segment[2]), 
                                   .d(Segment[3]), 
                                   .e(Segment[4]), 
                                   .f(Segment[5]), 
                                   .g(Segment[6]), 
                                   .p(Segment[7]));
endmodule
